###################################################################################################
# Week_01 - Numbers. Recursion (part 1)
###################################################################################################

[ ] Make a chat in Facebook with the name FP_IS_23-24.
[ ] Introduce GitHub repository.
[ ] File > Autosave.
[ ] Introduce ForHome at the start of the second hour. Please remind Mihi to do this, because he'll forget.
   - will add Simo to our email thread when giving feedback for week 1;
      - ❗SEND EMAIL WITH "Reply ALL" option❗


- VEEERY whitespace sensitive, i.e. tabs, spaces, new lines matter (a lot)
- comments:
   - use -- for single line comments
   - use {--} for multiline comments
   - only for human-readable text!
- everything is a function here!
   - read the following: a = 5 (a :: Int)
   - a++, ++a <- invalid. Use (a + 1)
- use camel case to name identifiers, i.e. myFunction
- #include ... (C++) -> import ... (Haskell)
- when passing negative numbers as parameters surround them in brackets
   - example: helper (-1)


Types
 ❗Important: 1. All types start with a capital letter!
              2. All types must be known at compile time! (strongly typed language; not the dynamic programming principles)
              3. If f returns Int, then f cannot return Double! (statically typed language)

 - Bool     -> True False

 - Int      -> whole numbers;          uses 32 bits                (ex. 1, 10, 153)
 - Integer  -> whole numbers;          unbounded                   (ex. 123456789123456789123456798)

 - Float    -> floating-point numbers; equivalent to float in C++  (ex. 1.52)
 - Double   -> floating-point numbers; equivalent to double in C++ (ex. 1.5252525252525252525252525252)
 - Rational -> floating-point numbers; unbounded

 - Char     -> equivalent to char                        in C++ (ex. 'a', '1', 'C', '\n')
 - String   -> equivalent to std::string and const char* in C++ (ex. "Haskell")


Built-in Functions
 - boolean logical operators: && || not

 - arithmetic:  +, -, * (Only for variables of the same type, i.e. n * m will give an error if n is Int and m - Double)
 
 - division:
    - for whole numbers:
        - quotient: div (ex. div 10 5 == 2; div 123 10 == 12)
        - remainder: mod (ex. mod 10 5 == 0; mod 123 10 == 3) (equivalent to % in C++)
    - real numbers:
        - use only "/" (equivalent to "/" in C++, but here it cannot be used for whole numbers)
 
 - power:
    - use n ^ m  when m is a natural number (i.e. m > 0) (ex. 2 ^ 3 == 8)
    - use n ** m when m is a floating-point number (ex. 2 ** 0.5 == 1.4142135623730951)
 
 - other: min, max, odd, even, gcd, abs, sqrt (sqrt 2 == 1.4142135623730951; sqrt :: Double -> Double)

 - ❗❗❗ Int -> Double: fromIntegral           (ex. if a is 5, then (fromIntegral a) is 5.0 ) ❗❗❗
 - ❗❗❗ Double -> Int: ceiling, floor, round, truncate  (ex. round 5.45 == 5)                ❗❗❗
 - ❗❗❗      != (C++) => /= (Haskell)         (ex. 5 /= 5 == False; True /= False == True)   ❗❗❗


 - The "Hello world" function:

    ($) - read this function as "after"; accepts a function as a left parameter and an expression as a right side.
    First it evaluates the expression.
    Then it passes the result to the function.

        print             $       "Hello world"
          ^               ^              ^
         / \             / \            / \
        /   \           /   \          /   \
          |               |              |
          |               |              |
          |               |              |
          |               |              |
       identifier      identifier       a string
       of a function   of a function


What is a predicate?
   ???


Conditions:
   if ... then ... else ...
   guards. Often denoted by the pipe symbol (|). The equivalent of a switch case in C++.
      ❗Prefer guards to if-then-else statements ❗
      ❗Prefer pattern matching whenever possible over guards ❗


Types of Evaluation Processes

   Linearly Recursive:
      1. The result is stored in a recursive tail.

      2. The recursive call is part of an expression.

   Linearly Iterative:
      1. The result is stored as a variable that is set by ANOTHER function.
      Often the variable is named "result" and the function - "helper".
      
      2. The recursive call is not part of an expression.
      These processes are faster than the linearly recursive ones!


Code quality advice:
   1. Apply functions that are prefix in a prefix way - that is how they were designed to be applied. Only if doing partial application is it permissive to apply them infixly.
   2. Prefer guards over if-else statements.
   3. Prefer pattern matching over guards.
   4. Do not use 'a', 'b', 'c' for naming parameters as these letters are used for defining polymorphic functions.
   5. Always reuse built-in functions. Do not implement them by yourselves unless explicitly specified in the task.

###################################################################################################
# Week_02 - Recursion (part 2)
###################################################################################################

Please no rar archives. Only zip archives.


FOR HOME:
   WARNING:
      Getting a "Yes" does not mean getting a bonus!


What is a declaration and what is a definition?
   int add(const int x, const int y)       <-- declaration
   {                                       <-- ???
      return x + y;                        <-- ???
   }                                       <-- ???


Closure
   When a function returns a lambda function, we call that lambda function a closure.


Type Inference - The Declaration Can Be Skipped
   The analog of "auto" in C++.
   The The Glasgow Haskell Compiler (GHC) can "guess" (more technically "infer") the types of every function
     - this ability is called type inference
   fname :: [type1 -> type2 -> ... ->]returnType     <= This is not needed



###################################################################################################
# Week_04 - Lists. Higher Order Functions
###################################################################################################

[ ] Test 1: 06.04 (Saturday)
[ ] Test 2: 02.06 (Sunday)


General
 - you can think of them as std::vector<a>
 - all values MUST be of ONE type
 - [] is the empty list
 - naming conventions:
    - helper 5 6          <= helper x y
    BUT
    - helper [1, 2, 3] [] <= helper xs ys


Constructing Lists
 - [1, 2, 3, 4, 5, 6]

 - by using cons (":") 
    - 1 : []  => [1]
    - 1 : [2] => [1, 2]
    - 1 : [2, 3] => [1, 2, 3]
    - ":" stands for "cons" (construct)
        - The second argument MUST BE a list!!

 - list comprehension. We'll see it in a bit.


Useful built-in functions
 - check whether a list is empty (i.e. doesn't have any contents)
    - null xs
    - using pattern matching (helper [] = error "Empty list")
    - xs == [] <- Not popular, but valid

 - getting the ith element of a list (analog with a train??)
    - !!! An error will be thrown if the index is not valid !!!

    - first element (the locomotive)
        - (x:xs) => x is the first element
        - head [1, 2, 3] => 1

    - last element
        - last [1, 2, 3, 4] => 4

    - all but the last element
        - init [1 .. 5] = [1, 2, 3, 4]
        [1 .. 7] -> [1, 2, 3, 4, 5, 6, 7]
        [1, 3, .. 7] -> [1, 3, 5, 7]

    - get all the wagons of the train
        - (x:xs) => xs is the tail
      right ->  (1:[2, 3, 4]) -> [1, 2, 3, 4]
      left ->   (1:[1, 2, 3, 4, 5]) 
      x = 1
        xs = [2, 3, 4, 5]
        - tail [1, 2, 3] => [2, 3]
        - tail [1 .. 5]  => [2, 3, 4, 5]

    - the ith element
        - xs!!5 => The element at INDEX 5 (ex. [1, 2, 3, 4, 5, 6]!!5 == 6)
        - [1 .. 5]!!3 = 4

 - is an element in a list?
    - elem x xs
        - elem 1 [16, 2, 3, 4] => False
        - elem 1 [14, 2, 1, 4] => True
        - elem 1 [1, 2, 3, 4]  => True

 - combine the elements of lists
    - [1, 2, 3] ++ [4, 5, 6]     => [1, 2, 3, 4, 5, 6]
    - concat [[1, 2, 3], [4, 5, 6]] => [1, 2, 3, 4, 5, 6]

 - length [1, 2, 3]                       => 3
 - reverse [1, 2, 3]                      => [3, 2, 1]
 - sum [1 .. 5]                           => 15 -- 1 + 2 + 3 + 4 + 5
 - product [1 .. 5]                       => 120 -- 1 * 2 * 3 * 4 * 5
 - minimum [2, 5, 6, 2, 1, 2, 6, 0, 45]   => 0
 - maximum [2, 5, 6, 2, 1, 2, 6, 0, 45]   => 45
 - take 5 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] => [1, 2, 3, 4, 5]
 - drop 5 [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] => [6, 7, 8, 9, 10]


Useful functions in the module Data.List
 - Remove duplicates
      nub [1, 1, 2, 3, 1, 5, 5, 1, 2, 5] => [1,2,3,5]

 - Sort the elements of a list in ascending order
      sort [5, 4 .. 1] => [1, 2, 3, 4, 5]

 - The group function takes a list and returns a list of lists such that the concatenation of the result is equal to the argument.
 Moreover, each sublist in the result contains only equal consecutive elements
      group :: (Eq a) => [a] -> [[a]]
      group "Misssissippi" => ["M","i","sss","i","ss","i","pp","i"]

 - replicate :: Int -> a -> [a]
      replicate 5 10 -> [10,10,10,10,10]


String - a list of characters.
Functions are part of the module Data.Char
 - type String = [Char]
 - Convert a number to a string
      show 15 == "15" == ['1', '5']
 - Convert a string to a number
      read "15" == 15
 - Convert a character to a digit
      digitToInt '5' -> 5 (part of Data.Char)


List Comprehension - Another Way Of Constructing a List
 - [1 .. 6]                                    => [1, 2, 3, 4, 5, 6]
 - [1, 3 .. 6]                                 => [1, 3, 5]
 - [ x + 10 | x <- [1 .. 6]]                   => [11, 12, 13, 14, 15, 16]
 - [ x | x <- [1 .. 6], even x]                => [2, 4, 6]
 - [ x | x <- [1 .. 6], mod x 3 == 0 && x > 3] => [6]


Higher order functions:
   Definition:
      A function that accepts at least one
      function as a parameter and/or returns a function.


Lambda function:
   (\ x -> f x)
   (\ x y -> x + y)
   map (+ 10) [1 .. 6] 
 - map    (\ x -> x + 10)         [1 .. 6]     => [11, 12, 13, 14, 15, 16] (eqiv. map (+10) [1 .. 6])
 - filter (\ x -> even x)         [1 .. 6]     => [2, 4, 6] (eqiv. filter even [1 .. 6])
 - all    (\ x -> odd x)          [1 .. 6]     => False
 - all    (\ x -> even x)         [2, 4, 6]    => True
 - any    (\ x -> odd x)          [2, 4, 6]    => False
 - any    (\ x -> mod x 10 == 0)  [20, 44, 61] => True


all (\ x -> even x) [1, 5, 8, 10, 12] = False
any (\ x -> even x) [1, 5, 8, 10, 12] = True